"""
This type stub file was generated by pyright.
"""

from inspect import currentframe as _currentframe
from ctypes import c_int as _c_int, py_object as _py_object, pythonapi as _pythonapi

"""Emulate dynamic scope in Python.

This module lets you use dynamic scope in Python. It provides a single
`dynamicscope` object: referring to an attribute on that object will
refer to a variable with the same name, using dynamic scoping rules.
"""
__all__ = ("DYNAMIC_SCOPE",)
__version__ = ...

class ReadError(RuntimeError):
    """The runtime does not support reading variables with dynamic scope."""

    ...

class WriteError(RuntimeError):
    """The runtime does not support writing variables with dynamic scope."""

    ...

class _DynamicScope:
    """This object represents dynamic scope."""

    def __getattribute__(self, name):  # -> Any:
        """Get a variable with dynamic scope."""
        ...

    def __setattr__(self, name, value):  # -> None:
        """Set a variable with dynamic scope."""
        ...

    def __delattr__(self, name):  # -> None:
        """Delete a variable with dynamic scope."""
        ...

DYNAMIC_SCOPE: _DynamicScope = ...
# if not _dynamic_scope_test():
#     _PyFrame_LocalsToFast = ...
#
#     class _DynamicScopeWithForcedUpdates(_DynamicScope):
#         def __setattr__(self, name, value):  # -> None:
#             """Set a variable with dynamic scope."""
#             ...
#
#         def __delattr__(self, name):  # -> None:
#             """Delete a variable with dynamic scope."""
#             ...
#
#     DYNAMIC_SCOPE: _DynamicScopeWithForcedUpdates = ...
